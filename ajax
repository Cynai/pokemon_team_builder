function ajax(options) {
    //Encoded data
    function setData() {
        var name, value;
        if (data) {
            if (typeof data === "string") {
                data = data.split("&");
                for (var i = 0, len = data.length; i <len; i++) {
                    name = data[i].split("=")[0];
                    value = data[i].split("=")[1];
                    data[i] = encodeURIComponent(name) + "=" + encodeURIComponent(value);
                }
                data = data.replace("/%20/g", "+");
            } else if (typeof data === "object") {
                var arr = [];
                for (var name in data) {
                    var value = data[name].toString();
                    name = encodeURIComponent(name);
                    value = encodeURIComponent(value);
                    arr.push(name + "=" + value);
                }
                data = arr.join("&").replace("/%20/g", "+");
            }
            //If you use the get method or JSONP, manually add it to the URL
            if (type === "get" || dataType === "jsonp") {
                url += url.indexOf("?")> -1? data: "?" + data;
            }
        }
    }
     // JSONP
    function createJsonp() {
        var script = document.createElement("script"),
            timeName = new Date().getTime() + Math.round(Math.random() * 1000),
            callback = "JSONP_" + timeName;

        window[callback] = function(data) {
            clearTimeout(timeout_flag);
            document.body.removeChild(script);
            success(data);
        }
        script.src = url + (url.indexOf("?")> -1? "": "?") + "callback=" + callback;
        script.type = "text/javascript";
        document.body.appendChild(script);
        setTime(callback, script);
    }
    //Set request timeout
    function setTime(callback, script) {
        if (timeOut !== undefined) {
            timeout_flag = setTimeout(function() {
                if (dataType === "jsonp") {
                    delete window[callback];
                    document.body.removeChild(script);

                } else {
                    timeout_bool = true;
                    xhr && xhr.abort();
                }
                console.log("timeout");

            }, timeOut);
        }
    }

    // XHR
    function createXHR() {
        //Because the XMLHttpRequest object of IE6 is realized by an ActiveX object in the MSXML library.
        //So to create an XHR object, you need to do compatibility processing here.
        function getXHR() {
            if (window.XMLHttpRequest) {
                return new XMLHttpRequest();
            } else {
                //Traverse different versions of ActiveX objects in IE
                var versions = ["Microsoft", "msxm3", "msxml2", "msxml1"];
                for (var i = 0; i <versions.length; i++) {
                    try {
                        var version = versions[i] + ".XMLHTTP";
                        return new ActiveXObject(version);
                    } catch (e) {}
                }
            }
        }
        //Create an object.
        xhr = getXHR();
        xhr.open(type, url, async);
        //Set the request header
        if (type === "post" && !contentType) {
            //If it is a post submission, set the content-Type to application/x-www-four-urlencoded
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
        } else if (contentType) {
            xhr.setRequestHeader("Content-Type", contentType);
        }
        //Add monitor
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (timeOut !== undefined) {
                    //Because the abort() method is executed, the onreadystatechange event may be triggered,
                    //So set a timeout_bool flag to ignore the event triggered by the abort.
                    if (timeout_bool) {
                        return;
                    }
                    clearTimeout(timeout_flag);
                }
                if ((xhr.status >= 200 && xhr.status <300) || xhr.status == 304) {

                    success(xhr.responseText);
                } else {
                     error(xhr.status, xhr.statusText);
                }
            }
        };
        //send request
        xhr.send(type === "get"? null: data);
        setTime(); //Request timeout
    }


    var url = options.url || "", //Requested link
        type = (options.type || "get").toLowerCase(), //Request method, default is get
        data = options.data || null, //requested data
        contentType = options.contentType || "", //Request header
        dataType = options.dataType || "", //request type
        async = options.async === undefined && true, //Whether it is asynchronous, default is true
        timeOut = options.timeOut, //Timeout time.
        before = options.before || function() {}, //The function executed before sending
        error = options.error || function() {}, //The function executed by error
        success = options.success || function() {}; //Callback function for successful request
    var timeout_bool = false, //Whether the request timed out
        timeout_flag = null, //Timeout flag
        xhr = null; //xhr diagonal
    setData();
    before();
    if (dataType === "jsonp") {
        createJsonp();
    } else {
        createXHR();
    }
}
